!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["genies-typescript-compiler"]=t():e["genies-typescript-compiler"]=t()}(this,(()=>(()=>{"use strict";var e={24:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EventContextTransformer=void 0;const r=n(710),s=n(71);t.EventContextTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e.asKindOrThrow(r.SyntaxKind.CallExpression),o=t.typeChecker,i=n.getExpression();if(r.Node.isPropertyAccessExpression(i)){const e=i.getName(),t=i.getExpression(),a=o.getTypeAtLocation(t),l=(0,s.isSignalBusType)(a)&&("subscribe"===e||"unsubscribe"===e),c=(0,s.isGeniesEventType)(a)&&("addListener"===e||"removeListener"===e);if(l||c){const e=n.getArguments(),t=l?1:0,s=l?2:1;if(e.length==s&&e.length>t&&r.Node.isPropertyAccessExpression(e[t])){const r=e[t],s=this.getContextExpression(r);n.addArgument(`//@ts-ignore\n${s.getText()}`)}}}return n}getContextExpression(e){return r.Node.isPropertyAccessExpression(e)?e.getExpression():e}}},58:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TransformationContext=void 0,t.TransformationContext=class{constructor(e){this.sourceFileGenericTypeMap=new Map,this.lastGenericTypeVarIndex=new Map,this.overloadMap=new Map,this.typeChecker=e}setSwapOverload(e,t){this.overloadMap.set(e,t)}getSwapOverload(e){return this.overloadMap.get(e)}}},71:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.updateImportsToAliasPaths=t.convertToAliasPath=t.convertToGeniesAliasPath=t.isGeniesScriptType=t.getGeniesScriptTypeFromType=t.getIsUnityAPIDeclaration=t.isAssignmentToSymbol=t.cleanTypeText=t.getTypeByName=t.getIsUnityAPIType=t.getIsValidUnityGenericTypeArg=t.extractProperties=t.getFullTypeName=t.getTypeNameAndEnsureImported=t.ensureTypeImported=t.insertVariableStatements=t.sortImportsAndVars=t.isOrInheritsFromGameObjectOrComponent=t.isGeniesEventType=t.isSignalBusType=t.traversePrototypeChain=t.removeDecorators=t.extendsScriptableObject=t.extendsMonoBehaviour=t.setProjectRoot=t.GeniesScriptType=t.NumericalAliases=t.UiInterfaceToEnumMap=t.AllowedUiInterfaces=t.GeniesScriptUiEvents=t.componentMethods=t.SET_ITEM_NAME=t.GET_ITEM_NAME=t.TooltipDecorator=t.SpaceDecorator=t.HeaderDecorator=t.SerializeFieldDecorator=t.HideInInspectorDecorator=t.NonSerializedDecorator=t.ScriptableObjectTypeName=t.MonobehaviourTypeName=t.GeniesInstancePropName=t.GeniesDeclarationFileAnnotation=t.projectRoot=void 0;const i=n(710),a=o(n(928));var l;t.projectRoot="",t.GeniesDeclarationFileAnnotation="//@Genies-UnityApiInterface",t.GeniesInstancePropName="__geniesInstance__",t.MonobehaviourTypeName="MonoBehaviour",t.ScriptableObjectTypeName="ScriptableObject",t.NonSerializedDecorator="NonSerialized",t.HideInInspectorDecorator="HideInInspector",t.SerializeFieldDecorator="SerializeField",t.HeaderDecorator="Header",t.SpaceDecorator="Space",t.TooltipDecorator="Tooltip",t.GET_ITEM_NAME="get_Item",t.SET_ITEM_NAME="set_Item",t.componentMethods=new Set(["GetComponent","TryGetComponent","GetComponentInChildren","GetComponentsInChildren","GetComponentInParent","GetComponentsInParent","GetComponents","AddComponent"]),function(e){e[e.None=0]="None",e[e.PointerClick=1]="PointerClick",e[e.PointerDown=2]="PointerDown",e[e.PointerEnter=4]="PointerEnter",e[e.PointerExit=8]="PointerExit",e[e.PointerUp=16]="PointerUp",e[e.BeginDrag=32]="BeginDrag",e[e.Deselect=64]="Deselect",e[e.Drag=128]="Drag",e[e.Drop=256]="Drop",e[e.EndDrag=512]="EndDrag",e[e.InitializePotentialDrag=1024]="InitializePotentialDrag",e[e.Scroll=2048]="Scroll",e[e.Select=4096]="Select",e[e.Submit=8192]="Submit",e[e.UpdateSelected=16384]="UpdateSelected",e[e.Move=32768]="Move",e[e.Cancel=65536]="Cancel"}(l||(t.GeniesScriptUiEvents=l={})),t.AllowedUiInterfaces=new Set(["UnityEngine.EventSystems.IPointerClickHandler","UnityEngine.EventSystems.IPointerDownHandler","UnityEngine.EventSystems.IPointerEnterHandler","UnityEngine.EventSystems.IPointerExitHandler","UnityEngine.EventSystems.IPointerUpHandler","UnityEngine.EventSystems.IBeginDragHandler","UnityEngine.EventSystems.IDeselectHandler","UnityEngine.EventSystems.IDragHandler","UnityEngine.EventSystems.IDropHandler","UnityEngine.EventSystems.IEndDragHandler","UnityEngine.EventSystems.IInitializePotentialDragHandler","UnityEngine.EventSystems.IScrollHandler","UnityEngine.EventSystems.ISelectHandler","UnityEngine.EventSystems.ISubmitHandler","UnityEngine.EventSystems.IUpdateSelectedHandler","UnityEngine.EventSystems.IMoveHandler","UnityEngine.EventSystems.ICancelHandler"]),t.UiInterfaceToEnumMap=new Map([["UnityEngine.EventSystems.IPointerClickHandler",l.PointerClick],["UnityEngine.EventSystems.IPointerDownHandler",l.PointerDown],["UnityEngine.EventSystems.IPointerEnterHandler",l.PointerEnter],["UnityEngine.EventSystems.IPointerExitHandler",l.PointerExit],["UnityEngine.EventSystems.IPointerUpHandler",l.PointerUp],["UnityEngine.EventSystems.IBeginDragHandler",l.BeginDrag],["UnityEngine.EventSystems.IDeselectHandler",l.Deselect],["UnityEngine.EventSystems.IDragHandler",l.Drag],["UnityEngine.EventSystems.IDropHandler",l.Drop],["UnityEngine.EventSystems.IEndDragHandler",l.EndDrag],["UnityEngine.EventSystems.IInitializePotentialDragHandler",l.InitializePotentialDrag],["UnityEngine.EventSystems.IScrollHandler",l.Scroll],["UnityEngine.EventSystems.ISelectHandler",l.Select],["UnityEngine.EventSystems.ISubmitHandler",l.Submit],["UnityEngine.EventSystems.IUpdateSelectedHandler",l.UpdateSelected],["UnityEngine.EventSystems.IMoveHandler",l.Move],["UnityEngine.EventSystems.ICancelHandler",l.Cancel]]);const c=new Map([["float","Single"],["int","Int32"],["double","Double"],["long","Int64"],["bool","Boolean"],["string","String"],["number","Double"],["short","Int16"],["ushort","UInt16"],["byte","Byte"],["sbyte","SByte"],["uint","UInt32"],["char","Char"]]),p=new Map([["float","System.Single"],["int","System.Int32"],["double","System.Double"],["long","System.Int64"],["bool","System.Boolean"],["string","System.String"],["number","System.Double"],["short","System.Int16"],["ushort","System.UInt16"],["byte","System.Byte"],["sbyte","System.SByte"],["uint","System.UInt32"],["char","System.Char"]]);var u;function g(e){let t=e.getBaseClass();for(;t;){if("MonoBehaviour"===t.getName())return!0;t=t.getBaseClass()}return!1}function d(e){let t=e.getBaseClass();for(;t;){if("ScriptableObject"===t.getName())return!0;t=t.getBaseClass()}return!1}function y(e,t,n){var r;const s=function(e,t){const n=[],r=e.getSymbol();if(!r)return n;const s=r.getDeclarations();if(!s)return n;for(const e of s)if(i.Node.isClassDeclaration(e)){const r=e.getHeritageClauses();for(const e of r){const r=e.getTypeNodes();for(const e of r){const r=t.typeChecker.getTypeAtLocation(e);r&&n.push(r)}}}return n}(e,n);for(const e of s){const s=null===(r=e.getSymbol())||void 0===r?void 0:r.getName();if(s&&t.includes(s))return!0;if(y(e,t,n))return!0}return!1}function f(e,n=!0,r=!0){let s="";const o=e.getAliasSymbol();if(s=o?o.getName():e.getText(),p.has(s))return p.get(s);const l=e.getSymbol();if(!l)return s;if(N(e))s=l.getFullyQualifiedName().replace(/['"]/g,"");else{const e=l.getDeclarations();let n=!1;if(e.forEach((e=>{(i.Node.isInterfaceDeclaration(e)||i.Node.isClassDeclaration(e))&&(n=e.isExported())})),!n&&e.length>0){const n=e[0].getSourceFile().getFilePath(),r=P(t.projectRoot,n),o=a.parse(r),i=a.join(o.dir,o.name);s=`${i}.${l.getFullyQualifiedName().replace(/['"]/g,"")}`}else s=l.getFullyQualifiedName().replace(/['"]/g,"");const r=a.parse(s);if(""!==r.dir||""!==r.root){let e=I(s);null!=e&&(s=e)}}const c=/\$\d+$/;if(n&&c.test(s)&&(s=s.replace(c,""),r)){const t=e.getTypeArguments();t.length>0&&(s+="<",t.forEach(((e,n)=>{let r=f(e);s+=r,n<t.length-1&&(s+=", ")})),s+=">")}return s}function m(e,n="",r=new Map){const s=[];return e.getProperties().forEach((e=>{const o=e.getScope(),a=C(e);if(e.isStatic()||e.isReadonly())return;if("private"===o&&!a.some((e=>e.Type===t.SerializeFieldDecorator)))return;if("public"===o&&a.some((e=>e.Type===t.NonSerializedDecorator)))return;const l=x(e.getType(),r),c=l.isArray(),p=S(l,r),u=f(p),g=e.getName();let d=n?`${n}.${g}`:g;function y(e){if(e.getKind()===i.SyntaxKind.NewExpression){const t=e;return`new ${f(t.getType())}(${t.getArguments().map((e=>e.getText())).join(", ")});`}if(e.getKind()===i.SyntaxKind.PropertyAccessExpression){const t=e;return`${f(t.getExpression().getType())}.${t.getName()}`}return e.getText()}const m=[];if(e.hasInitializer()){const t=e.getInitializer();if(t)if(t.getKind()===i.SyntaxKind.ArrayLiteralExpression){const e=t;for(let t=0;t<e.getElements().length;t++){const n=e.getElements()[t];m.push(y(n))}}else m.push(y(t))}const E={Path:d,Name:g,TypeName:u,ChildProperties:[],IsArray:c,IsEnum:!1,EnumKeys:[],EnumValues:[],Decorators:C(e),IsGeniesBehaviourRef:!1,IsGeniesScriptableObjectRef:!1,Initializers:m,ArrayElementInitializer:void 0,ArrayDimension:-1};if(c){let e=1;return E.ArrayElementInitializer=T(l,u,g,d,e,r),E.ArrayDimension=e,void s.push(E)}h(p,E,r),s.push(E)})),s}function h(e,t,n){const r=e.isEnum(),s=e.getSymbol()||e.getAliasSymbol();if(!s)return;const o=s.getDeclarations()[0],a=b(o),l=v(o,a);if(t.IsGeniesBehaviourRef=l==u.Monobehaviour,t.IsGeniesScriptableObjectRef=l==u.ScriptableObject,!a&&l===u.None&&(r&&function(e,t){const{keys:n,values:r}=function(e){const t=e.getSymbol(),n=null==t?void 0:t.getDeclarations().find((e=>e.getKind()===i.SyntaxKind.EnumDeclaration));return n?{keys:n.getMembers().map((e=>e.getName())),values:n.getMembers().map((e=>e.getValue()))}:{keys:[],values:[]}}(t);e.EnumKeys=n,e.EnumValues=r.map((e=>void 0===e?"":e.toString())),e.IsEnum=!0}(t,e),s.getDeclarations().some((e=>i.Node.isClassDeclaration(e))))){const r=s.getDeclarations().find(i.Node.isClassDeclaration),o=r.getTypeParameters(),a=e.getTypeArguments(),l=new Map(n);o.forEach(((e,t)=>{const n=`${e.getName()}_${r.getName()}`;l.set(n,a[t])}));const c=[];let p=r;for(;p;){p.getName(),c.unshift(...m(p,t.Path,l));let e=p.getBaseClass();if(void 0===e)break;p=e}t.ChildProperties=c}}function T(e,t,n,r,s,o){let i=e.isArray()?e.getArrayElementType():e;i.isArray()||(i=S(i,o));let a=s;const l={Path:r+"_D"+s,Name:n,TypeName:t,ArrayDimension:s,ChildProperties:[],IsArray:i.isArray(),IsEnum:i.isEnum(),EnumKeys:[],EnumValues:[],Decorators:[],IsGeniesBehaviourRef:!1,IsGeniesScriptableObjectRef:!1,Initializers:[],ArrayElementInitializer:void 0};return i.isArray()?l.ArrayElementInitializer=T(i,t,n,r,++a,o):h(i,l,o),l}function x(e,t){var n,r;let s=e;if(s.isTypeParameter()){const e=null===(n=s.getSymbol())||void 0===n?void 0:n.getName(),o=null===(r=s.getSymbol())||void 0===r?void 0:r.getDeclarations()[0].getParent(),a=`${e}_${o&&i.Node.isClassDeclaration(o)?o.getName():""}`;a&&t.has(a)&&(s=t.get(a))}return s}function S(e,t){let n=e;for(;null==n?void 0:n.isArray();)n=n.getArrayElementType();return n=x(n,t),n}function E(e){if(!e)return!1;const n=e.getFirstChild();if(!n)return console.log("No nodes found in the file."),!1;const r=n.getLeadingCommentRanges();return r.length>0&&r[0].getText()===t.GeniesDeclarationFileAnnotation}function N(e){let t=e.getSymbol();if(!t){let t=e.getApparentType().getSymbol();return void(t&&console.log(t.getName()))}const n=t.getDeclarations();if(n&&0!==n.length)return E(n[0].getSourceFile())}function b(e){return E(e.getSourceFile())}function v(e,t){if(e.getKind()!==i.SyntaxKind.ClassDeclaration||t)return u.None;const n=e,r=g(n),s=d(n);return r?u.Monobehaviour:s?u.ScriptableObject:u.None}function A(e){const t=e.getSymbol();if(!t)return u.None;const n=t.getDeclarations();if(0===n.length)return u.None;const r=n[0];return v(r,b(r))}function I(e){const t=e.split(a.sep).join("/"),n=t.indexOf("/Assets/");if(-1!==n)return`@assets/${t.substring(n+8)}`;const r=t.match(/\/(com\.genies\.[^\/]+)\//);return r?`@${r[1]}/${t.substring(r.index+r[0].length)}`:null}function P(e,t){return I(a.resolve(e,t))||t}function C(e){return e.getDecorators().map((e=>({Type:e.getName(),Args:e.getArguments().map((e=>e.getText()))})))}t.NumericalAliases=new Set(["byte","sbyte","short","ushort","int","uint","float","double","number"]),function(e){e[e.None=0]="None",e[e.Monobehaviour=1]="Monobehaviour",e[e.ScriptableObject=2]="ScriptableObject"}(u||(t.GeniesScriptType=u={})),t.setProjectRoot=function(e){t.projectRoot=e},t.extendsMonoBehaviour=g,t.extendsScriptableObject=d,t.removeDecorators=function(e,t){e.forEach((e=>{try{t(e)&&e.remove()}catch(e){}}))},t.traversePrototypeChain=function(e){const t=new Set;let n=e;for(;n;){const e=f(n.getType());e&&t.add(e),n.getImplements().forEach((e=>{const n=[e.getType()];for(;n.length>0;){const e=n.shift();if(!e)continue;const r=f(e);r&&!t.has(r)&&(t.add(r),e.getBaseTypes().forEach((e=>{n.push(e)})))}})),n=n.getBaseClass()}return Array.from(t)},t.isSignalBusType=function(e){const t=e.getSymbol();return!!t&&"SignalBus"===t.getName()},t.isGeniesEventType=function(e){const t=e.getSymbol();return!!t&&"GeniesEvent"===t.getName()},t.isOrInheritsFromGameObjectOrComponent=function(e,t){if(!e)return!1;const n=e.getSymbol();return!!n&&(!!["GameObject","Component","MonoBehaviour"].includes(n.getName())||y(e,["GameObject","Component","MonoBehaviour"],t))},t.sortImportsAndVars=function(e){const t=e.getStatements(),n=t.filter((e=>e.getKind()===i.SyntaxKind.ImportDeclaration)),r=t.filter((e=>e.getKind()===i.SyntaxKind.VariableStatement)),s=t.filter((e=>e.getKind()!==i.SyntaxKind.ImportDeclaration&&e.getKind()!==i.SyntaxKind.VariableStatement)),o=[...n.map((e=>e.getText())),"",...r.map((e=>e.getText())),"",...s.map((e=>e.getText()))].join("\n\n");e.replaceWithText(o)},t.insertVariableStatements=function(e,t,n){if(0===t.length)return;let r;r=n.lastGenericTypeVarIndex.has(e)?n.lastGenericTypeVarIndex.get(e):function(e){const t=e.getStatements();let n=-1;return t.forEach(((e,t)=>{e.getKind()===i.SyntaxKind.ImportDeclaration&&(n=t)})),n}(e)+1;const s=e.getStatements().length;r=Math.min(r,s),e.insertVariableStatements(r,t),n.lastGenericTypeVarIndex.set(e,r+t.length)},t.ensureTypeImported=function(e,t){var n,r;let s=null!==(r=null===(n=e.getSymbol())||void 0===n?void 0:n.getName())&&void 0!==r?r:e.getText(),o="";if(c.has(s))s=c.get(s),o="System";else{const t=A(e);if(t!==u.None)switch(t){case u.Monobehaviour:s="MonoBehaviour",o="UnityEngine";break;case u.ScriptableObject:s="ScriptableObject",o="UnityEngine"}else{if(!N(e))throw new Error("Can't use non CSharp types");{const t=f(e,!0,!1),n=t.lastIndexOf(".");o=t.substring(0,n)}}}const a=t.getImportDeclarations().find((e=>e.getModuleSpecifierValue()===o));if(a)a.getNamedImports().some((e=>e.getName()===s))||a.addNamedImport(s);else{const e={kind:i.StructureKind.ImportDeclaration,moduleSpecifier:o,namedImports:[{name:s}]};t.addImportDeclaration(e)}},t.getTypeNameAndEnsureImported=function(e,t){var n,r;let s=null!==(r=null===(n=e.getSymbol())||void 0===n?void 0:n.getName())&&void 0!==r?r:e.getText(),o="",a="";if(c.has(s))o=s=c.get(s),a="System";else{const t=A(e);if(t!==u.None)switch(t){case u.Monobehaviour:s="MonoBehaviour",a="UnityEngine";break;case u.ScriptableObject:s="ScriptableObject",a="UnityEngine"}else{if(!N(e))throw new Error("Can't use non CSharp types");{o=f(e,!0,!1);const t=o.lastIndexOf(".");a=o.substring(0,t)}}}const l=t.getImportDeclarations().find((e=>e.getModuleSpecifierValue()===a));if(l)l.getNamedImports().some((e=>e.getName()===s))||l.addNamedImport(s);else{const e={kind:i.StructureKind.ImportDeclaration,moduleSpecifier:a,namedImports:[{name:s}]};t.addImportDeclaration(e)}return`$typeof("${o}")`},t.getFullTypeName=f,t.extractProperties=m,t.getIsValidUnityGenericTypeArg=function(e){let t="";const n=e.getAliasSymbol();return t=n?n.getName():e.getText(),!!["float","int","double","long","bool","string","number"].includes(t)||A(e)!==u.None||N(e)},t.getIsUnityAPIType=N,t.getTypeByName=function(e,t){const n=t.resolveName(e,void 0,i.SymbolFlags.All,!1);return n?t.getDeclaredTypeOfSymbol(n):void console.log(`Global type '${e}' not found.`)},t.cleanTypeText=function(e){return e.replace(/&\s*\{[^}]*\}/,"").trim()},t.isAssignmentToSymbol=function(e,t){if(i.Node.isPropertyAccessExpression(e)){const n=e.getExpression();if(i.Node.isThisExpression(n))return e.getNameNode().getSymbol()===t}else if(i.Node.isIdentifier(e))return e.getSymbol()===t;return!1},t.getIsUnityAPIDeclaration=b,t.getGeniesScriptTypeFromType=A,t.isGeniesScriptType=function(e){let t=A(e);return t===u.Monobehaviour||t===u.ScriptableObject},t.convertToGeniesAliasPath=I,t.convertToAliasPath=P,t.updateImportsToAliasPaths=function(e){const t=e.getDirectoryPath();e.getImportDeclarations().forEach((e=>{const n=e.getModuleSpecifierValue();if(n.startsWith("./")||n.startsWith("../")){const r=P(t,n);(r.startsWith("@assets/")||r.startsWith("@com.genies"))&&e.setModuleSpecifier(r)}}))}},101:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getNumericValue=t.typesAreEqual=t.isNumericCastable=t.selectBestOverload=t.inferPossibleTypes=void 0;const r=n(710),s=n(71);function o(e,t){const n=[],r=t.getTypeAtLocation(e);let o=[];const i=function(e,t){const n=e.getText();if(s.NumericalAliases.has(n)){const e=(0,s.getTypeByName)(n,t);if(e)return e}const r=n.match(/number\s*&\s*\{\s*__([a-zA-Z]+)Brand\?:\s*undefined\s*\}/);if(r){const e=r[1],n=(0,s.getTypeByName)(e,t);if(n)return n}return null}(r,t);if(null!=i)n.push(i);else{const t=p(e);if(void 0!==t)o=function(e){const{value:t,hasDecimal:n}=e,r=new Set;return n?(r.add("float"),r.add("double")):(t>=-2147483648&&t<=2147483647&&r.add("int"),t>=-32768&&t<=32767&&r.add("short"),t>=-128&&t<=127&&r.add("sbyte"),t>=0&&t<=255&&r.add("byte"),t>=0&&t<=65535&&r.add("ushort"),t>=0&&t<=4294967295&&r.add("uint")),Array.from(r)}(t);else{if(a=r,"number"!==(0,s.cleanTypeText)(a.getText()))return n.push(r),n;o=["byte","sbyte","short","ushort","int","uint","float","double"]}}var a;for(const e of o){const r=(0,s.getTypeByName)(e,t);r&&n.push(r)}return n}function i(e,t,n){const r=e.getParameters();if(r.length<t.length)return-1;let s=r.length==t.length?1:0;for(let e=0;e<r.length;e++){const o=n.getTypeAtLocation(r[e]),i=t[e];if(!i||i.length<=0)return-1;const l=a(o,i,n);if(l<0)return-1;s+=l}return s}function a(e,t,n){let r=-1;if(e.isTypeParameter()){const s=e.getConstraint();if(!s)return t.length>0?1:-1;for(const e of t)c(e,s)?r=Math.max(r,2):n.isTypeAssignableTo(e,s)&&(r=Math.max(r,1));return r}if(function(e){const t=(0,s.cleanTypeText)(e.getText());return s.NumericalAliases.has(t)}(e)){for(const n of t)c(n,e)?r=Math.max(r,2):l(n,e)&&(r=Math.max(r,1));return r}for(const s of t)c(s,e)?r=Math.max(r,2):n.isTypeAssignableTo(s,e)&&(r=Math.max(r,1));return r}function l(e,t){var n,r;const o=(0,s.cleanTypeText)(e.getText()),i=(0,s.cleanTypeText)(t.getText());return null!==(r=null===(n={byte:["short","ushort","int","uint","float","double","number"],sbyte:["short","int","float","double","number"],short:["int","float","double","number"],ushort:["int","uint","float","double","number"],int:["float","double","number"],uint:["float","double","number"],float:["double","number"],double:["number"],number:["byte","sbyte","short","ushort","int","uint","float","double"]}[o])||void 0===n?void 0:n.includes(i))&&void 0!==r&&r}function c(e,t){return(0,s.cleanTypeText)(e.getText())===(0,s.cleanTypeText)(t.getText())}function p(e){const t=u(e);if(void 0!==t)return t;if(r.Node.isIdentifier(e)||r.Node.isPropertyAccessExpression(e)){const t=e.getSymbol();if(t){const n=t.getDeclarations();if(n&&n.length>0){const s=n[0];if(r.Node.isVariableDeclaration(s)||r.Node.isPropertyDeclaration(s)){const n=g(t,s,e);if(n)return n}}}}}function u(e){if(r.Node.isNumericLiteral(e)){const t=e.getText();return{value:Number(t),hasDecimal:t.includes(".")}}if(r.Node.isPrefixUnaryExpression(e)&&e.getOperatorToken()===r.SyntaxKind.MinusToken){const t=e.getOperand();if(r.Node.isNumericLiteral(t)){const e=t.getText();return{value:-Number(e),hasDecimal:e.includes(".")}}}}function g(e,t,n){let o;const i=t.getInitializer();if(i){const r=d(i,e,t,n);r&&(o=r)}const a=n.getFirstAncestorByKind(r.SyntaxKind.MethodDeclaration);if(!a)return o;const l=a.getStatements()||[],c=n.getStart();for(const i of l){if(i.getStart()>c)break;{const a=i.getDescendants().filter((e=>r.Node.isBinaryExpression(e)||r.Node.isPrefixUnaryExpression(e)||r.Node.isPostfixUnaryExpression(e)));for(const i of a)if(r.Node.isBinaryExpression(i)){const a=i.getOperatorToken().getKind(),l=i.getLeft(),c=i.getRight();if((0,s.isAssignmentToSymbol)(l,e))if(a===r.SyntaxKind.EqualsToken){o=d(c,e,t,n,o)||void 0}else if([r.SyntaxKind.PlusEqualsToken,r.SyntaxKind.MinusEqualsToken,r.SyntaxKind.AsteriskEqualsToken,r.SyntaxKind.SlashEqualsToken,r.SyntaxKind.PercentEqualsToken].includes(a)){const r=d(c,e,t,n,o);if(r&&o){o=y(a,o,r)||void 0}else o=void 0}}else if(r.Node.isPrefixUnaryExpression(i)||r.Node.isPostfixUnaryExpression(i)){const t=i.getOperatorToken(),n=i.getOperand();if((0,s.isAssignmentToSymbol)(n,e))if(o){let e=t===r.SyntaxKind.PlusPlusToken?1:-1;o={value:o.value+e,hasDecimal:o.hasDecimal}}else o=void 0}}}return o}function d(e,t,n,o,i){if(r.Node.isNumericLiteral(e))return u(e);if(r.Node.isIdentifier(e)||r.Node.isPropertyAccessExpression(e)){if((0,s.isAssignmentToSymbol)(e,t))return i;{const t=e.getSymbol();if(t){const n=t.getDeclarations();if(n&&n.length>0){const s=n[0];if(r.Node.isVariableDeclaration(s)||r.Node.isPropertyDeclaration(s))return g(t,s,e)}}}}else if(r.Node.isBinaryExpression(e)){const r=d(e.getLeft(),t,n,o,i),s=d(e.getRight(),t,n,o,i);if(r&&s)return f(e.getOperatorToken().getKind(),r,s)}}function y(e,t,n){const s={[r.SyntaxKind.PlusEqualsToken]:r.SyntaxKind.PlusToken,[r.SyntaxKind.MinusEqualsToken]:r.SyntaxKind.MinusToken,[r.SyntaxKind.AsteriskEqualsToken]:r.SyntaxKind.AsteriskToken,[r.SyntaxKind.SlashEqualsToken]:r.SyntaxKind.SlashToken,[r.SyntaxKind.PercentEqualsToken]:r.SyntaxKind.PercentToken}[e];if(void 0!==s)return f(s,t,n)}function f(e,t,n){let s,o=t.hasDecimal||n.hasDecimal;switch(e){case r.SyntaxKind.PlusToken:s=t.value+n.value;break;case r.SyntaxKind.MinusToken:s=t.value-n.value;break;case r.SyntaxKind.AsteriskToken:s=t.value*n.value;break;case r.SyntaxKind.SlashToken:s=t.value/n.value,o=!0;break;case r.SyntaxKind.PercentToken:s=t.value%n.value;break;default:return}if(void 0!==s)return{value:s,hasDecimal:o}}t.inferPossibleTypes=o,t.selectBestOverload=function(e,t,n){if(!e||e.length<=0)return;if(1==e.length)return e[0];const r=t.getArguments();if(!r||r.length<=0){return e.find((e=>0===e.getParameters().length))||void 0}const s=t.getArguments().map((e=>o(e,n)));let a,l=-1;for(const t of e){const e=i(t,s,n);e>l&&(l=e,a=t)}return a},t.isNumericCastable=l,t.typesAreEqual=c,t.getNumericValue=p},105:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.getGeniesSemanticDiagnostics=void 0;const s=n(710),o=r(n(985)),i=n(71),a=10006,l=new Set(["MonoBehaviour","ScriptableObject"]),c=new Set(["GetComponent","TryGetComponent","GetComponentInChildren","GetComponentsInChildren","GetComponentInParent","GetComponentsInParent","GetComponents","AddComponent"]);function p(e,t,n,r){const s=t.getStart(),i=t.getWidth(),a={file:t.getSourceFile().compilerNode,start:s,length:i,messageText:n,category:o.default.DiagnosticCategory.Error,code:r,source:"Genies"};e.push(a)}t.getGeniesSemanticDiagnostics=function(e,t){if(!e)return[];const n=[];return function(e,t){e.getClasses().forEach((n=>{var r;const s=n.getBaseClass(),a=n.getImplements(),c=null==s?void 0:s.getName();if(s&&(0,i.getIsUnityAPIType)(s.getType())&&c&&!l.has(c)){const i=s.getStart(),a=null===(r=s.getName())||void 0===r?void 0:r.length,l=`Class '${n.getName()}' inherits from a Unity type '${s.getName()}' that is not 'MonoBehaviour' or 'ScriptableObject'.`,c={file:e.compilerNode,start:i,length:a,messageText:l,category:o.default.DiagnosticCategory.Error,code:10001,source:"Genies"};t.push(c)}a.forEach((r=>{if((0,i.getIsUnityAPIType)(r.getType())){const s=(0,i.getFullTypeName)(r.getType());if(i.AllowedUiInterfaces.has(s))return;const a=r.getStart(),l=r.getWidth(),c=`Class '${n.getName()}' implements a forbidden Unity interface '${r.getText()}'.`,p={file:e.compilerNode,start:a,length:l,messageText:c,category:o.default.DiagnosticCategory.Error,code:10002,source:"Genies"};t.push(p)}}))}))}(e,n),function(e,t){e.getDescendantsOfKind(s.SyntaxKind.CallExpression).forEach((e=>{!function(e,t){const n=e.getExpression();let r=[];if(s.Node.isPropertyAccessExpression(n)||s.Node.isIdentifier(n)){const e=n.getSymbol();e&&(r=e.getDeclarations().filter((e=>s.Node.isMethodDeclaration(e))))}if(0===r.length)return;if(!(r.filter((e=>e.getTypeParameters().length>0)).length>0))return;if(r=r.filter((e=>(0,i.getIsUnityAPIDeclaration)(e))),0===r.length)return;const o=function(e){return s.Node.isPropertyAccessExpression(e)?e.getName():s.Node.isIdentifier(e)?e.getText():""}(n);if(function(e,t){const n=t.getArguments().map((e=>e.getType())),r=t.getProject().getTypeChecker();return e.some((e=>{if(e.getTypeParameters().length>0)return!1;const t=e.getParameters();if(t.length!==n.length)return!1;for(let e=0;e<t.length;e++){const s=t[e].getType(),o=n[e];if(!r.isTypeAssignableTo(o,s))return!1}return!0}))}(r,e))return;const l=e.getTypeArguments();if(0===l.length)return void p(t,e,`Generic method '${o}' must be called with type arguments.`,10003);let u=r.map((e=>e.getTypeParameters().length));u.includes(l.length)||p(t,e,`Generic method '${o}' was provided the wrong number of arguments. Valid args counts: '${u.join(", ")}'`,a),c.has(o)?l.forEach((e=>{(function(e){const t=e.getType();if((0,i.getIsUnityAPIType)(t))return!0;if((0,i.getGeniesScriptTypeFromType)(t)===i.GeniesScriptType.Monobehaviour)return!0;const n=t.getSymbol();if(n){const e=n.getDeclarations();if(e&&e.length>0&&s.Node.isInterfaceDeclaration(e[0]))return!0}return!1})(e)||p(t,e,`Type arguments for method '${o}' must be a Unity API type, an interface, or a type that extends MonoBehaviour.`,10004)})):l.forEach((e=>{const n=e.getType();(0,i.getIsValidUnityGenericTypeArg)(n)||p(t,e,`Type arguments for method '${o}' must be Unity API types.`,10004)}))}(e,t)}))}(e,n),function(e,t){e.getDescendantsOfKind(s.SyntaxKind.NewExpression).forEach((e=>{const n=e.getType().getSymbol();if(!n)return;const r=n.getDeclarations();if(!r||0===r.length)return;const o=r.filter((e=>s.Node.isClassDeclaration(e)&&(0,i.getIsUnityAPIDeclaration)(e)&&e.getTypeParameters().length>0));if(0===o.length)return;const l=o[0].getTypeParameters().length,c=e.getTypeArguments(),u=c.length;0===u?p(t,e,`Generic class '${(0,i.getFullTypeName)(e.getType())}' must be instantiated with ${l} type argument(s).`,10005):(u!==l&&p(t,e,`Generic class '${(0,i.getFullTypeName)(e.getType())}' expects ${l} type argument(s), but got ${u}.`,a),c.forEach((n=>{const r=n.getType();(0,i.getIsValidUnityGenericTypeArg)(r)||p(t,n,`Type arguments for type '${(0,i.getFullTypeName)(e.getType())}' must be Unity API types.`,a)})))}))}(e,n),n}},113:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PromiseWrapperTransformer=void 0;const r=n(710);t.PromiseWrapperTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.AwaitExpression,r.SyntaxKind.CallExpression]}transformNode(e,t){const n=t.typeChecker;if(r.Node.isAwaitExpression(e)){const t=e,r=t.getExpression(),s=n.getTypeAtLocation(r);if(this.isPromise(s)){const e=`await $promise(${r.getText()})`;return t.replaceWithText(`${e}`)}}else if(r.Node.isCallExpression(e)){const t=e,s=t.getExpression();if(r.Node.isPropertyAccessExpression(s)){const e=s.getName(),r=s.getExpression(),o=n.getTypeAtLocation(r);if(this.isPromise(o)&&this.isPromiseMethod(e)){const e=`$promise(${r.getText()})${t.getText().substring(r.getText().length)}`;return t.replaceWithText(e)}}}return e}isPromise(e){const t=e.getSymbol();if(!t)return!1;const n=t.getName();return"Task"===n||"Task$1"===n||"UniTask"===n||"UniTask$1"===n||"YieldAwaitable"===n}isPromiseMethod(e){return["then","catch","finally"].includes(e)}}},130:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getOperatorNodeReturnType=t.getUnaryOperatorMethodReturnType=t.getEquivalentOperatorForCompound=t.isCompoundAssignment=t.unwrapParenthesizedExpression=t.getOperatorMethodName=t.getOperatorMethodReturnType=void 0;const r=n(710),s=n(71),o=n(101);function i(e,t,n,s){const i=t.getSymbol();if(!i)return null;const a=i.getDeclarations();for(const i of a)if(r.Node.isClassDeclaration(i)){const r=i.getMethods().filter((e=>e.getName()===n&&0===e.getTypeParameters().length));for(const n of r){const r=n.getParameters();if(2===r.length){const i=r[0].getType(),a=r[1].getType(),l=(0,o.typesAreEqual)(a,s)||e.isTypeAssignableTo(s,a);if(((0,o.typesAreEqual)(i,t)||e.isTypeAssignableTo(t,i))&&l)return n.getReturnType()}}}return null}function a(e,t=!1){if(t)switch(e){case r.SyntaxKind.MinusToken:return"op_UnaryNegation";case r.SyntaxKind.PlusToken:return"op_UnaryPlus";case r.SyntaxKind.ExclamationToken:return"op_LogicalNot";case r.SyntaxKind.TildeToken:return"op_OnesComplement";case r.SyntaxKind.PlusPlusToken:return"op_Increment";case r.SyntaxKind.MinusMinusToken:return"op_Decrement";default:return}else switch(e){case r.SyntaxKind.PlusToken:return"op_Addition";case r.SyntaxKind.MinusToken:return"op_Subtraction";case r.SyntaxKind.AsteriskToken:return"op_Multiply";case r.SyntaxKind.SlashToken:return"op_Division";case r.SyntaxKind.PercentToken:return"op_Modulus";case r.SyntaxKind.EqualsEqualsToken:case r.SyntaxKind.EqualsEqualsEqualsToken:return"op_Equality";case r.SyntaxKind.ExclamationEqualsToken:case r.SyntaxKind.ExclamationEqualsEqualsToken:return"op_Inequality";case r.SyntaxKind.GreaterThanToken:return"op_GreaterThan";case r.SyntaxKind.LessThanToken:return"op_LessThan";case r.SyntaxKind.GreaterThanEqualsToken:return"op_GreaterThanOrEqual";case r.SyntaxKind.LessThanEqualsToken:return"op_LessThanOrEqual";case r.SyntaxKind.BarToken:return"op_BitwiseOr";case r.SyntaxKind.AmpersandToken:return"op_BitwiseAnd";case r.SyntaxKind.CaretToken:return"op_ExclusiveOr";case r.SyntaxKind.LessThanLessThanToken:return"op_LeftShift";case r.SyntaxKind.GreaterThanGreaterThanToken:return"op_RightShift";default:return}}function l(e){return r.Node.isParenthesizedExpression(e)?l(e.getExpression()):e}function c(e){return e>=r.SyntaxKind.FirstCompoundAssignment&&e<=r.SyntaxKind.LastCompoundAssignment}function p(e){switch(e){case r.SyntaxKind.PlusEqualsToken:return r.SyntaxKind.PlusToken;case r.SyntaxKind.MinusEqualsToken:return r.SyntaxKind.MinusToken;case r.SyntaxKind.AsteriskEqualsToken:return r.SyntaxKind.AsteriskToken;case r.SyntaxKind.SlashEqualsToken:return r.SyntaxKind.SlashToken;case r.SyntaxKind.PercentEqualsToken:return r.SyntaxKind.PercentToken;case r.SyntaxKind.AmpersandEqualsToken:return r.SyntaxKind.AmpersandToken;case r.SyntaxKind.BarEqualsToken:return r.SyntaxKind.BarToken;case r.SyntaxKind.CaretEqualsToken:return r.SyntaxKind.CaretToken;case r.SyntaxKind.LessThanLessThanEqualsToken:return r.SyntaxKind.LessThanLessThanToken;case r.SyntaxKind.GreaterThanGreaterThanEqualsToken:return r.SyntaxKind.GreaterThanGreaterThanToken;case r.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken:return r.SyntaxKind.GreaterThanGreaterThanGreaterThanToken;default:throw new Error(`Unsupported compound operator: ${r.SyntaxKind[e]}`)}}function u(e,t){const n=e.getSymbol();if(!n)return null;const s=n.getDeclarations();for(const n of s)if(r.Node.isClassDeclaration(n)){const r=n.getMethods().filter((e=>e.getName()===t&&0===e.getTypeParameters().length));for(const t of r){const n=t.getParameters();if(1===n.length&&n[0].getType().getText()===e.getText())return t.getReturnType()}}return null}function g(e,t){return r.Node.isBinaryExpression(e)?d(e,t):r.Node.isPrefixUnaryExpression(e)||r.Node.isPostfixUnaryExpression(e)?y(e,t):t.TypeChecker.getTypeAtLocation(e)}function d(e,t){const n=e.getOperatorToken().getKind();let o=a(n);if(c(n)&&(o=a(p(n))),null==o)return null;if(n===r.SyntaxKind.EqualsEqualsEqualsToken||n===r.SyntaxKind.EqualsEqualsToken||n===r.SyntaxKind.ExclamationEqualsEqualsToken||n==r.SyntaxKind.ExclamationEqualsToken){const t=l(e.getRight());if(r.Node.isNullLiteral(t)||r.Node.isUndefinedKeyword(t))return null;const n=l(e.getLeft());if(r.Node.isNullLiteral(n)||r.Node.isUndefinedKeyword(n))return null}const u=l(e.getLeft()),d=l(e.getRight());let y=g(u,t),f=g(d,t);if(null==y||null==f)return null;if(f.isLiteral()&&(f=t.TypeChecker.getBaseTypeOfLiteralType(f)),y.isLiteral()&&(y=t.TypeChecker.getBaseTypeOfLiteralType(y)),!(0,s.getIsUnityAPIType)(y)&&!(0,s.getIsUnityAPIType)(f))return t.TypeChecker.getTypeAtLocation(e);const m=i(t.TypeChecker,y,o,f),h=i(t.TypeChecker,f,o,y);if(null==m&&null==h)return null;if(c(n)){const e=a(p(n));return null==e?null:i(t.TypeChecker,y,e,f)}return null!=m?m:h}function y(e,t){const n=l(e.getOperand()),r=a(e.getOperatorToken(),!0);return r?u(t.TypeChecker.getTypeAtLocation(n),r):null}t.getOperatorMethodReturnType=i,t.getOperatorMethodName=a,t.unwrapParenthesizedExpression=l,t.isCompoundAssignment=c,t.getEquivalentOperatorForCompound=p,t.getUnaryOperatorMethodReturnType=u,t.getOperatorNodeReturnType=function(e,t){return r.Node.isBinaryExpression(e)?d(e,t):r.Node.isPrefixUnaryExpression(e)||r.Node.isPostfixUnaryExpression(e)?y(e,t):null}},150:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n);var s=Object.getOwnPropertyDescriptor(t,n);s&&!("get"in s?!t.__esModule:s.writable||s.configurable)||(s={enumerable:!0,get:function(){return t[n]}}),Object.defineProperty(e,r,s)}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),s=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return s(t,e),t},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=o(n(899)),l=o(n(928)),c=n(71),p=n(710),u=n(113),g=n(538),d=n(340),y=n(780),f=n(195),m=n(371),h=n(58),T=n(551),x=n(452),S=n(821),E=n(24),N=n(105),b=n(286),v=n(682),A=n(325),I=n(256),P=i(n(471)),C=n(276),K=i(n(669));t.default=class{constructor(e){this.project=new p.Project({tsConfigFilePath:e,skipAddingFilesFromTsConfig:!1}),this.rootDirectory=l.dirname(e);const t=this.project.getTypeChecker();(0,c.setProjectRoot)(this.rootDirectory),this.transformationContext=new h.TransformationContext(t),this.transformers=[{phase:1,transformer:new I.CSharpEventTransformer},{phase:1,transformer:new d.RefTransformer},{phase:1,transformer:new E.EventContextTransformer},{phase:1,transformer:new b.DelegateToArrowFunctionTransformer},{phase:1,transformer:new A.BracketAccessTransformer},{phase:1,transformer:new u.PromiseWrapperTransformer},{phase:1,transformer:new g.ComponentCallTransformer},{phase:1,transformer:new x.ScriptableObjectCreateInstanceTransformer},{phase:1,transformer:new m.ExtensionMethodTransformer},{phase:1,transformer:new T.GeniesInstanceTransformer},{phase:2,transformer:new y.GenericTypeTransformer},{phase:3,transformer:new S.OperatorOverloadingTransformer},{phase:4,transformer:new v.NumericOverloadResolutionTransformer},{phase:5,transformer:new f.GenericMethodTransformer}]}compile(e,t,n){this.project.addSourceFilesAtPaths(e),this.project.addSourceFilesAtPaths(t),n&&n.length>0&&(this.fixReferences(n,this.rootDirectory),this.project.saveSync());let r=new Set,s=new Set,o=new Map;e.forEach((e=>{const t=this.project.getSourceFileOrThrow(e);this.collectFiles(t,r,s,o)}));const i=this.topologicalSort(Array.from(r),o),a=new Map;let l=new Map;return i.forEach((e=>{let t=new P.default(e.getFullText());this.setDefaultExport(e),(0,c.updateImportsToAliasPaths)(e),this.initializeCompileOutput(l,e);try{this.applyTransformationDiffs(t,e),a.set(e,t)}catch(e){console.error(e)}})),i.forEach((e=>{this.emit(l,a,e)})),JSON.stringify({outputs:[...l.values()]})}setDefaultExport(e){const t=e.getDefaultExportSymbol();let n=null;if(t&&(n=t.getDeclarations().find((e=>e.getKind()===a.SyntaxKind.ClassDeclaration))),null==n)for(const t of e.getClasses())if(((0,c.extendsMonoBehaviour)(t)||(0,c.extendsScriptableObject)(t))&&!t.isDefaultExport()){t.setIsDefaultExport(!0);break}}fixReferences(e,t){const n=new Map;for(const{oldPath:t,newPath:r}of e)n.set(l.resolve(t),l.resolve(r));for(const e of this.project.getSourceFiles())for(const r of e.getImportDeclarations()){const s=r.getModuleSpecifierValue();if(!s)continue;const o=this.resolveSpecifier(s,e.getDirectoryPath(),t)+".ts";if(n.has(o)){const t=n.get(o);let s;const i=this.project.getSourceFile(t);if(i)s=e.getRelativePathAsModuleSpecifierTo(i);else{const n=e.getDirectoryPath();s=l.relative(n,t).replace(/\\/g,"/"),s.startsWith(".")||(s="./"+s)}r.setModuleSpecifier(s)}}}resolveSpecifier(e,t,n){return e.startsWith(".")?l.resolve(t,e):e.startsWith("/")?l.resolve(e):l.resolve(n,e)}groupTransformersByPhase(){return this.transformers.reduce(((e,t)=>{const{phase:n}=t;return e[n]||(e[n]=[]),e[n].push(t),e}),{})}runTransformers(e){const t=this.groupTransformersByPhase();for(const n of Object.keys(t).sort(((e,t)=>Number(e)-Number(t)))){const r=Number(n),s=t[r];let o=0,i=!0;for(;i;){i=!1,o++;const t=e.getDescendants();for(let e=0;e<t.length;e++){let n=t[e],r=n;if(i)break;s.forEach((({transformer:s})=>{r.wasForgotten()?i=!0:!r.wasForgotten()&&s.nodeTypes.includes(r.getKind())&&(r=s.transformNode(r,this.transformationContext),r!==n&&(i=!0,t[e]=r))}))}i&&console.log(`Phase ${r}: Retrying transformation due to forgotten nodes. Attempt ${o}`)}}}initializeCompileOutput(e,t){var n;try{const n=this.getGeniesDiagnostics(t);if(this.runTransformers(t),(0,c.sortImportsAndVars)(t),n.push(...this.getDiagnostics(t)),n.length>0)return void e.set(t,{FilePath:t.getFilePath(),IsSuccessful:!1,Errors:n,JsSource:"",IsMonobehaviour:!1,IsScriptableObj:!1,Properties:[],Id:t.getFilePath(),DefaultTypeName:"",InheritanceChain:[],SupportedUiEvents:c.GeniesScriptUiEvents.None,ReferencedSpecifiers:[]});const r=t.getDefaultExportSymbol();let s;r&&(s=r.getDeclarations().find((e=>e.getKind()===a.SyntaxKind.ClassDeclaration)));let o=!1,i=!1,l="";void 0!==s&&(o=(0,c.extendsMonoBehaviour)(s),i=(0,c.extendsScriptableObject)(s),l=(0,c.getFullTypeName)(s.getType()));const p=[];let u=[],g=c.GeniesScriptUiEvents.None;if(o||i&&s){let e=s;for(;e;){const t=e.getName();if(t==c.MonobehaviourTypeName||t==c.ScriptableObjectTypeName)break;p.unshift(...(0,c.extractProperties)(e)),e=e.getBaseClass()}u=(0,c.traversePrototypeChain)(s),(null==u?void 0:u.length)>0&&u.forEach((e=>{c.UiInterfaceToEnumMap.has(e)&&(g|=c.UiInterfaceToEnumMap.get(e))}))}const d=t.getImportDeclarations().map((e=>e.getModuleSpecifierValue())).filter((e=>e.startsWith("@assets/")||e.startsWith("@com.genies")));e.set(t,{FilePath:t.getFilePath(),IsSuccessful:!1,Errors:n,JsSource:"",IsMonobehaviour:o,IsScriptableObj:i,Properties:p,Id:t.getFilePath(),DefaultTypeName:l,InheritanceChain:u,SupportedUiEvents:g,ReferencedSpecifiers:d})}catch(r){let s=null!==(n=this.getDiagnostics(t))&&void 0!==n?n:[];return s.push(`Transformations Failed: ${r}`),void e.set(t,{FilePath:t.getFilePath(),IsSuccessful:!1,Errors:s,JsSource:"",IsMonobehaviour:!1,IsScriptableObj:!1,Properties:[],Id:t.getFilePath(),DefaultTypeName:"",InheritanceChain:[],SupportedUiEvents:c.GeniesScriptUiEvents.None,ReferencedSpecifiers:[]})}}emit(e,t,n){try{const r=[c.NonSerializedDecorator,c.HideInInspectorDecorator,c.SerializeFieldDecorator,c.HeaderDecorator,c.SpaceDecorator,c.TooltipDecorator],s=n.getDescendantsOfKind(p.SyntaxKind.Decorator);(0,c.removeDecorators)(s,(e=>r.includes(e.getName())));let o=n.getEmitOutput().getOutputFiles()[0].getText();o=this.remapSources(o,n,t);let i=e.get(n),a=i.Errors;i.IsSuccessful=void 0===a||0===a.length,i.JsSource=o}catch(t){let r=e.get(n);if(!r)return void console.error(t);r.Errors?r.Errors.push(`Compilation Failed: ${t}`):r.Errors=[t],r.IsSuccessful=!1,r.JsSource=""}}remapSources(e,t,n){try{let r=n.get(t).generateMap({source:t.getBaseName(),file:t.getBaseName(),includeContent:!1,hires:!0});const s=/\/\/# sourceMappingURL=data:application\/json(?:;charset=utf-8)?;base64,([A-Za-z0-9+/=]+)/,o=e.match(s);if(!o)throw new Error("No inline source map found in the JS output.");const i=o[1],a=Buffer.from(i,"base64").toString("utf8"),l=JSON.parse(a),c=(0,K.default)([l,JSON.stringify(r)],(()=>null)),p=JSON.stringify(c),u=`data:application/json;charset=utf-8;base64,${Buffer.from(p,"utf8").toString("base64")}`;return`${e.replace(s,"").trim()}\n//# sourceMappingURL=${u}`}catch(t){return console.error(t),e}}getGeniesDiagnostics(e){return(0,N.getGeniesSemanticDiagnostics)(e,this.project.getTypeChecker()).map((t=>{var n;const r=null!==(n=t.start)&&void 0!==n?n:0,{line:s,column:o}=e.getLineAndColumnAtPos(r),i=this.flattenDiagnosticMessageText(t.messageText);return`${e.getFilePath()} (${s},${o}): ${i}`}))}getDiagnostics(e){return e.getPreEmitDiagnostics().map((e=>e.compilerObject)).map((t=>{var n;const r=null!==(n=t.start)&&void 0!==n?n:0,{line:s,column:o}=e.getLineAndColumnAtPos(r),i=this.flattenDiagnosticMessageText(t.messageText);return`${e.getFilePath()} (${s},${o}): ${i}`}))}flattenDiagnosticMessageText(e){return"string"==typeof e?e:a.flattenDiagnosticMessageText(e,"\n")}collectFiles(e,t,n,r){const s=e.getFilePath();n.has(s)||(n.add(s),t.add(e),r.has(e)||r.set(e,new Set),e.getReferencingSourceFiles().forEach((s=>{this.collectFiles(s,t,n,r),r.has(s)||r.set(s,new Set),r.get(s).add(e)})))}topologicalSort(e,t){try{return this.topologicalSortWithTarjan(e,t)}catch(e){return console.error(`Topological Sort Failed: ${e}`),[]}}topologicalSortWithCycles(e,t){const n=new Map,r=new Map,s={value:0},o=[],i=new Set,a=[],l=e=>{if(n.set(e,s.value),r.set(e,s.value),s.value++,o.push(e),i.add(e),(t.get(e)||new Set).forEach((t=>{n.has(t)?i.has(t)&&r.set(e,Math.min(r.get(e),n.get(t))):(l(t),r.set(e,Math.min(r.get(e),r.get(t))))})),r.get(e)===n.get(e)){const t=[];let n;do{if(n=o.pop(),void 0===n)break;i.delete(n),t.push(n)}while(n!==e);a.push(t)}};return e.forEach((e=>{n.has(e)||l(e)})),a}topologicalSortWithTarjan(e,t){const n=this.topologicalSortWithCycles(e,t),r=[];for(let e=n.length-1;e>=0;e--)r.push(...n[e]);return r}applyTransformationDiffs(e,t){const n=new C.diff_match_patch,r=e.original,s=t.getFullText(),o=n.diff_main(r,s);let i=0,a=0;for(const[t,n]of o)if(0===t)i+=n.length,a+=n.length;else if(-1===t){try{e.remove(i,i+n.length)}catch(e){console.error(`Error removing text at [${i}, ${i+n.length}): ${e}`)}i+=n.length}else if(1===t){try{e.appendRight(i,n)}catch(e){console.error(`Error inserting text at ${i}: ${e}`)}a+=n.length}}}},195:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenericMethodTransformer=void 0;const r=n(710),s=n(71);t.GenericMethodTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression],this.sourceFileGenericMap=new Map}transformNode(e,t){let n=e;if(e.getKind()===r.SyntaxKind.CallExpression){const o=e.asKindOrThrow(r.SyntaxKind.CallExpression),i=o.getExpression(),a=i.getLastChildByKind(r.SyntaxKind.Identifier);if(a){const e=a.getText();if(s.componentMethods.has(e)){const e=i.getFirstChild();if(e){const r=t.typeChecker.getTypeAtLocation(e);if((0,s.isOrInheritsFromGameObjectOrComponent)(r,t))return n}}}if(i.getKind()===r.SyntaxKind.PropertyAccessExpression){const a=i.asKindOrThrow(r.SyntaxKind.PropertyAccessExpression);let l,c=a.getName();const p=a.getSymbol(),u=a.getExpression(),g=u.getType();if(!p)return n;const d=t.getSwapOverload(o);if(d&&(c=d.methodSwapValue,l=d.declaration),void 0===l){const e=p.getDeclarations();if(!(e.length>0))return n;l=e[0]}if(!l)return n;{if(!(0,s.getIsUnityAPIDeclaration)(l))return n;const r=l.getParent().getType(),i=o.getArguments(),a=o.getTypeArguments();if(a.length>0){const p=e.getSourceFile();this.sourceFileGenericMap.has(p)||this.sourceFileGenericMap.set(p,new Map);const d=a.map((e=>e.getType()));if(this.hasMatchingNonGenericOverload(l,d,i))n=this.replaceWithNonGenericCall(o,d,i,t);else{let e=[];const d=this.createGenericMethodVariable(r,c,a,p,e,t);(0,s.insertVariableStatements)(p,e,t);const y=i.map((e=>e.getFullText())).join(", "),f=l.isStatic(),m=(0,s.isGeniesScriptType)(g)&&!f?"//@ts-ignore\n"+u.getText()+"."+s.GeniesInstancePropName:u.getText(),h=f?`${d}(${y})`:`${d}.call(${m}, ${y})`;n=o.replaceWithText(h)}}}}}return n}getTypeName(e){var t,n;return null!==(n=null===(t=e.getSymbol())||void 0===t?void 0:t.getName())&&void 0!==n?n:e.getText()}getTypeKey(e,t){return`${this.getTypeName(e)}$${t.map((e=>{let t=e.getTypeArguments();return t.length>0?this.getTypeKey(e,t):this.getTypeName(e)})).join("$")}`}getKey(e,t,n){return`${this.getTypeName(e)}$${t}$${n.map((e=>this.getTypeName(e.getType()))).join("$")}`}createGenericMethodVariable(e,t,n,o,i,a){const l=this.getTypeName(e),c=this.getKey(e,t,n),p=this.sourceFileGenericMap.get(o);if(!p.has(c)){const e=`$genericMethod(${l}, "${t}", ${n.map((e=>(0,s.getIsUnityAPIType)(e.getType())&&e.getType().isInterface()?`$typeof("${(0,s.getFullTypeName)(e.getType())}")`:this.getTypeNameAndEnsureImported(e.getType(),o,a))).join(", ")})`,u=`_${c.replace(/\$/g,"_")}`;p.set(c,u),i.push({declarationKind:r.VariableDeclarationKind.Const,declarations:[{name:u,initializer:e}]})}return p.get(c)}getTypeNameAndEnsureImported(e,t,n){if(n.sourceFileGenericTypeMap.has(t)){let r=n.sourceFileGenericTypeMap.get(t),s=e.getTypeArguments(),o=this.getTypeKey(e,s);if(r.has(o))return r.get(o)}return(0,s.getTypeNameAndEnsureImported)(e,t)}hasMatchingNonGenericOverload(e,t,n){const r=e.getParent(),o=e.getName(),i=r.getMethods().filter((e=>e.getName()===o&&0===e.getTypeParameters().length)),a="System.Type";for(const e of i){const r=e.getParameters();if(r.filter((e=>(0,s.getFullTypeName)(e.getType())===a)).length===t.length&&r.length===t.length+n.length)return r.every(((e,r)=>r<t.length?(0,s.getFullTypeName)(e.getType())===a:e.getType().getText()===n[r-t.length].getType().getText()))}return!1}replaceWithNonGenericCall(e,t,n,o){const i=e.asKindOrThrow(r.SyntaxKind.CallExpression),a=i.getExpression().asKindOrThrow(r.SyntaxKind.PropertyAccessExpression),l=a.getName(),c=a.getExpression().getText(),p=t.map((t=>(0,s.getIsUnityAPIType)(t)&&t.isInterface()?`$typeof("${(0,s.getFullTypeName)(t)}")`:`${this.getTypeNameAndEnsureImported(t,e.getSourceFile(),o)}`)).join(", "),u=n.map((e=>e.getText())).join(", "),g=`${c}.${l}(${p}${u?`, ${u}`:""}) as ${i.getReturnType().getText()}`;return e.replaceWithText(g)}}},229:function(e,t,n){var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const s=r(n(150));!function(){const e=process.argv.slice(2);let t,n=[],r=[],o=[],i=null;for(const s of e)if("--tsconfig"===s||"-t"===s)i="tsconfig";else if("-c"===s||"--compile"===s)i="compile";else if("-p"===s||"--project"===s)i="project";else if("-mf"===s||"--movedFiles"===s)i="movedFiles";else if("tsconfig"===i)t=s,i=null;else if("compile"===i)n.push(s);else if("project"===i)r.push(s);else if("movedFiles"===i){try{o=JSON.parse(s)}catch(e){console.error("Failed to parse movedFiles JSON:",e),process.exit(1)}i=null}t&&0!==n.length||(console.error("Usage: node index.js --tsconfig <tsconfigPath> -c <file1> [<file2> [...]] -p <additionalFile1> [<additionalFile2> [...]]"),process.exit(1));try{const e=new s.default(t).compile(n,r,o);process.stdout.write(e.toString())}catch(e){console.error("Compilation failed:",e),process.exit(1)}}()},256:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CSharpEventTransformer=void 0;const r=n(710);t.CSharpEventTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){if(r.Node.isCallExpression(e)){const n=e,s=n.getExpression();if(r.Node.isPropertyAccessExpression(s)){const e=s.getName();if("Add"===e||"Remove"===e){const o=s.getExpression(),i=t.typeChecker.getTypeAtLocation(o);if(this.isCSharpEventType(i)&&r.Node.isPropertyAccessExpression(o)){const t=o.getName(),r=o.getExpression(),s=this.createNewCallExpression(n,r,e.toLowerCase(),t);return this.addTsIgnoreComment(s),s}}}}return e}isCSharpEventType(e){const t=e.getSymbol();if(!t)return!1;const n=t.getName();return"CSharpEvent"===n||"CSharpEvent_Add"===n||"CSharpEvent_Remove"===n}createNewCallExpression(e,t,n,r){const s=e.getArguments().map((e=>e.getText())).join(", "),o=`${n}_${r}`,i=`${t.getText()}.${o}(${s})`;return e.replaceWithText(i)}addTsIgnoreComment(e){const t=e.getSourceFile(),n=e.getStart();t.insertText(n,"// @ts-ignore\n")}}},276:e=>{e.exports=require("diff-match-patch")},286:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DelegateToArrowFunctionTransformer=void 0;const r=n(710),s=n(71);t.DelegateToArrowFunctionTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e.asKindOrThrow(r.SyntaxKind.CallExpression),o=t.typeChecker,i=n.getExpression();if(r.Node.isPropertyAccessExpression(i)){const t=i.getExpression(),n=o.getTypeAtLocation(t);if((0,s.isSignalBusType)(n)||(0,s.isGeniesEventType)(n))return e}const a=o.getResolvedSignature(n);if(!a)return e;const l=a.getParameters();return n.getArguments().map(((e,t)=>{const s=l[t];if(s){const t=o.getTypeOfSymbolAtLocation(s,n);if(this.isDelegateType(t)&&!r.Node.isArrowFunction(e))return this.wrapInArrowFunction(e,t)}return e})),n}isDelegateType(e){return e.getCallSignatures().length>0}wrapInArrowFunction(e,t){const n=t.getCallSignatures();if(0===n.length)throw new Error("Expected delegate type to have call signatures.");const r=n[0].getParameters().map((e=>e.getName())).join(", "),s=`(${r}) => ${e.getText()}(${r})`;return console.log(`Wrapping in arrow function: ${s}`),e.replaceWithText(s)}}},325:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BracketAccessTransformer=void 0;const r=n(710),s=n(71);t.BracketAccessTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.ElementAccessExpression]}transformNode(e,t){if(!r.Node.isElementAccessExpression(e))return e;const n=e,o=n.getExpression(),i=n.getArgumentExpression();if(!i)return e;const a=o.getType();if(!(0,s.getIsUnityAPIType)(a))return e;const l=a.getSymbol();if(!l)return e;const c=l.getDeclarations().filter((e=>r.Node.isClassDeclaration(e)||r.Node.isInterfaceDeclaration(e)));if(0===c.length)return e;const p=[],u=[],g=new Set;if(c.forEach((e=>{e.getMethods().forEach((e=>{var t;const n=e.getName();if(n===s.GET_ITEM_NAME||n===s.SET_ITEM_NAME){const r=null===(t=e.getSignature().getDeclaration())||void 0===t?void 0:t.getText();r&&!g.has(r)&&(n===s.GET_ITEM_NAME?p.push(e):u.push(e),g.add(r))}}))})),0===p.length&&0===u.length)return e;const d=n.getParent();if(r.Node.isBinaryExpression(d)&&d.getOperatorToken().getKind()===r.SyntaxKind.EqualsToken&&d.getLeft()===n){if(0===u.length)return e;const n=d.getRight();if(!u.find((e=>{const r=e.getParameters();if(2!==r.length)return!1;const s=r[0].getType(),o=r[1].getType(),a=i.getType(),l=n.getType(),c=t.typeChecker;return c.isTypeAssignableTo(a,s)&&c.isTypeAssignableTo(l,o)})))return e;const r=o.getText(),a=i.getText(),l=n.getText(),c=`${r}.${s.SET_ITEM_NAME}(${a}, ${l})`;return d.replaceWithText(c),d}{if(0===p.length)return e;if(!p.find((e=>{const n=e.getParameters();if(1!==n.length)return!1;const r=n[0].getType(),s=i.getType();return t.typeChecker.isTypeAssignableTo(s,r)})))return e;const r=o.getText(),a=i.getText(),l=`${r}.${s.GET_ITEM_NAME}(${a})`;return n.replaceWithText(l),n}}}},340:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RefTransformer=void 0;const r=n(710);t.RefTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.BinaryExpression,r.SyntaxKind.PropertyAccessExpression]}transformNode(e,t){let n=e;if(r.Node.isBinaryExpression(e)&&e.getOperatorToken().getKind()===r.SyntaxKind.EqualsToken){const s=e,o=s.getLeft(),i=s.getRight();if(r.Node.isPropertyAccessExpression(o)&&"value"===o.getName()&&this.isRefType(o.getExpression(),t.typeChecker)){const t=o.getExpression().getText(),r=i.getText();n=e.replaceWithText(`$set(${t}, ${r})`)}}else if(r.Node.isPropertyAccessExpression(e)){const r=e;if("value"===r.getName()&&this.isRefType(r.getExpression(),t.typeChecker)){const t=r.getExpression().getText();n=e.replaceWithText(`$unref(${t})`)}}return n}isRefType(e,t){const n=t.getTypeAtLocation(e).getSymbol();return!!n&&"$Ref"===n.getName()}}},371:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExtensionMethodTransformer=void 0;const r=n(710),s=n(71),o=n(101);t.ExtensionMethodTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e,i=n.getExpression();if(!r.Node.isPropertyAccessExpression(i))return e;const a=i.asKindOrThrow(r.SyntaxKind.PropertyAccessExpression),l=a.getName(),c=a.getExpression(),p=c.getType(),u=a.getSymbol();if(!u)return e;const g=u.getDeclarations();if(!g||g.length<=0)return e;const d=g.filter((e=>r.Node.isMethodSignature(e)));if(0===d.length)return e;const y=d[0];if(!(0,s.getIsUnityAPIDeclaration)(y))return e;const f=t.typeChecker,m=(0,o.selectBestOverload)(d,n,f);if(!m)return e;if(m.getKind()!=r.SyntaxKind.MethodSignature)return e;const h=m.getJsDocs().flatMap((e=>e.getTags()))||[];if(!h.some((e=>"extension"===e.getTagName())))return e;const T=h.find((e=>"extension"===e.getTagName()));if(!T)return e;let x=null;const S=h.find((e=>"extension-generic-arg-index"===e.getTagName()));if(S){const e=S.getCommentText()||"0";x=parseInt(e,10),isNaN(x)&&(x=null)}const E=T.getCommentText(),{extensionClass:N,extensionMethod:b,typeParameters:v}=this.parseExtensionComment(E,l),A=e.getSourceFile(),I=this.extractAndOrderTypeArguments(c,n,m,v,x);A.fixMissingImports();const P=n.getArguments(),C=N.split("."),K=C.pop()||"",D=C.join(".");this.ensureImport(A,K,D);const M=(0,s.isGeniesScriptType)(p)?"//@ts-ignore\n"+c.getText()+"."+s.GeniesInstancePropName:c.getText(),O=P.map((e=>e.getFullText())).join(", "),$=I.length>0?`${K}.${b}<${I.join(", ")}>(${M}, ${O})`:`${K}.${b}(${M}, ${O})`;return n.replaceWithText($)}parseExtensionComment(e,t){if(!e)return{extensionClass:"",extensionMethod:t,typeParameters:[]};const n=e.match(/^(?<namespace>[a-zA-Z_]\w*(?:\.[a-zA-Z_]\w*)*)\.(?<method>[a-zA-Z_]\w*)\s*(?:<(?<arguments>[^>]*)>)?$/);if(n&&n.groups){const{namespace:e,method:t,arguments:r}=n.groups;return{extensionClass:e,extensionMethod:t,typeParameters:r?r.split(",").map((e=>e.trim())):[]}}return{extensionClass:"",extensionMethod:t,typeParameters:[]}}ensureImport(e,t,n){const r=e.getImportDeclarations();let s=!1;for(const e of r)if(e.getModuleSpecifier().getLiteralText()===n){s=!0,e.getNamedImports().some((e=>e.getName()===t))||e.addNamedImport(t);break}s||e.addImportDeclaration({namedImports:[{name:t}],moduleSpecifier:n})}getTypeName(e){return e.getText(void 0,r.TypeFormatFlags.None)}extractAndOrderTypeArguments(e,t,n,r,o){const i=e.getType(),a=i.getTypeArguments(),l=i.getSymbolOrThrow().getDeclaredType().getTypeArguments(),c=new Map;a.forEach(((e,t)=>{const n=l[t];n&&c.set(n.getText(),e.getText())}));const p=t.getTypeArguments(),u=n.getTypeParameters();p.forEach(((e,t)=>{const n=u[t];n&&c.set(n.getText(),e.getText())}));let g=r.map((e=>c.get(e)||e));return null!==o&&o>=0&&o<=g.length&&((0,s.getTypeNameAndEnsureImported)(i,t.getSourceFile()),g.splice(o,0,this.getTypeName(i))),g}}},452:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ScriptableObjectCreateInstanceTransformer=void 0;const r=n(710),s=n(71);t.ScriptableObjectCreateInstanceTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){let n=e;if(r.Node.isCallExpression(e)){const s=e,o=s.getExpression(),i=s.getTypeArguments(),a=s.getArguments();if(i.length>0||this.isTypeofArgument(a)){const e=o.getLastChildByKind(r.SyntaxKind.Identifier);if(!e)return n;const l=e.getText();if("CreateInstance"===l){const e=o.getFirstChild();if(!e)return n;const r=t.typeChecker.getTypeAtLocation(e);if(this.isScriptableObject(r,t)){const r=t.typeChecker.getTypeAtLocation(s);if(i.length>0){const o=i[0],a=t.typeChecker.getTypeAtLocation(o);n=this.processTypeArgument(s,a,!1,l,e,r)}else if(this.isTypeofArgument(a)){const o=this.getTypeFromTypeofArgument(a[0]);if(o){const i=t.typeChecker.getTypeAtLocation(o);n=this.processTypeArgument(s,i,!0,l,e,r)}}}}}}return n}isTypeofArgument(e){return e.length>0&&e[0].getText().startsWith("$typeof(")}getTypeFromTypeofArgument(e){const t=e.getFirstChildByKind(r.SyntaxKind.CallExpression);if(t){const e=t.getArguments()[0];if(r.Node.isTypeNode(e))return e}}processTypeArgument(e,t,n,r,o,i){if((0,s.getIsUnityAPIType)(t)){if(n)return e;const s=this.getTypeName(t),a=this.createOverloadedCallExpression(e,`$typeof(${s})`,r,o,i);return e.replaceWithText(a)}if((0,s.getGeniesScriptTypeFromType)(t)===s.GeniesScriptType.ScriptableObject){const n=(0,s.getFullTypeName)(t),a=this.createOverloadedCallExpression(e,`"${n}"`,r,o,i,!0);return e.replaceWithText(a)}return e}isScriptableObject(e,t){if(!e)return!1;const n=e.getSymbol();return!!n&&("ScriptableObject"===n.getName()||this.inheritsFrom(e,["ScriptableObject"],t))}inheritsFrom(e,t,n){var r;const s=this.getBaseTypes(e,n);for(const e of s){const s=null===(r=e.getSymbol())||void 0===r?void 0:r.getName();if(s&&t.includes(s))return!0;if(this.inheritsFrom(e,t,n))return!0}return!1}getBaseTypes(e,t){const n=[],s=e.getSymbol();if(!s)return n;const o=s.getDeclarations();if(!o)return n;for(const e of o)if(r.Node.isClassDeclaration(e)){const r=e.getHeritageClauses();for(const e of r){const r=e.getTypeNodes();for(const e of r){const r=t.typeChecker.getTypeAtLocation(e);r&&n.push(r)}}}return n}getTypeName(e){const t=e.getSymbol();return t?t.getName():e.getText()}createOverloadedCallExpression(e,t,n,r,s,o=!1){const i=e.getArguments().map((e=>e.getText())).join(", "),a=s.getText();let l=`(${r.getFullText()}.${n}(${t}${i?", "+i:""}) as ${a})`;return o&&(l=`${l}`),l}}},471:e=>{e.exports=require("magic-string")},538:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ComponentCallTransformer=void 0;const r=n(710),s=n(71);t.ComponentCallTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){let n=e;if(r.Node.isCallExpression(e)){const o=e,i=o.getExpression(),a=o.getTypeArguments(),l=o.getArguments();if(a.length>0||this.isTypeofArgument(l)){const e=i.getLastChildByKind(r.SyntaxKind.Identifier);if(!e)return n;const c=e.getText();if(s.componentMethods.has(c)){const e=i.getFirstChild();if(!e)return n;const r=t.typeChecker.getTypeAtLocation(e);if((0,s.isOrInheritsFromGameObjectOrComponent)(r,t)){const e=t.typeChecker.getTypeAtLocation(o);if(a.length>0){const r=a[0],s=t.typeChecker.getTypeAtLocation(r);n=this.processTypeArgument(o,s,!1,e)}else if(this.isTypeofArgument(l)){const r=this.getTypeFromTypeofArgument(l[0]);if(r){const s=t.typeChecker.getTypeAtLocation(r);n=this.processTypeArgument(o,s,!0,e)}}}}}}return n}isTypeofArgument(e){return e.length>0&&e[0].getText().startsWith("$typeof(")}getTypeFromTypeofArgument(e){const t=e.getFirstChildByKind(r.SyntaxKind.CallExpression);if(t){const e=t.getArguments()[0];if(r.Node.isTypeNode(e))return e}}processTypeArgument(e,t,n,r){if((0,s.getIsUnityAPIType)(t)){if(n)return e;const o=t.isInterface()?`$typeof("${(0,s.getFullTypeName)(t)}")`:`$typeof(${this.getTypeName(t)})`;return this.createOverloadedCallExpression(e,`${o}`,r)}if(t.isInterface()){const n=(0,s.getFullTypeName)(t);return this.createOverloadedCallExpression(e,`"${n}"`,r,!0)}if((0,s.getGeniesScriptTypeFromType)(t)===s.GeniesScriptType.Monobehaviour){const n=(0,s.getFullTypeName)(t);return this.createOverloadedCallExpression(e,`"${n}"`,r,!0)}return e}getTypeName(e){const t=e.getSymbol();return t?t.getName():e.getText()}createOverloadedCallExpression(e,t,n,r=!1){const s=n.getText();e.getTypeArguments().forEach((t=>{e.removeTypeArgument(t)})),e.insertArgument(0,t);const o=`(${e.getText()} as ${s})`,i=e.replaceWithText(o);if(r){const e=i.getSourceFile(),t=i.getStart();e.insertText(t,"// @ts-ignore\n")}return i}}},551:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GeniesInstanceTransformer=void 0;const r=n(710),s=n(71);t.GeniesInstanceTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e.asKindOrThrow(r.SyntaxKind.CallExpression),o=t.typeChecker,i=o.getTypeAtLocation(n.getExpression());if(!(0,s.getIsUnityAPIType)(i))return e;const a=n.getArguments();return a.forEach(((e,t)=>{const n=o.getTypeAtLocation(e);if((0,s.isGeniesScriptType)(n)){const n=`//@ts-ignore\n${e.getText()}.${s.GeniesInstancePropName}`;a[t]=e.replaceWithText(n)}})),n}}},669:e=>{e.exports=require("@ampproject/remapping")},682:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.NumericOverloadResolutionTransformer=void 0;const r=n(710),s=n(71),o=n(101);t.NumericOverloadResolutionTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.CallExpression]}transformNode(e,t){if(!r.Node.isCallExpression(e))return e;const n=e,i=n.getExpression();if(!r.Node.isPropertyAccessExpression(i)&&!r.Node.isIdentifier(i))return e;const a=(r.Node.isPropertyAccessExpression(i)?i.getNameNode():i).getSymbol();if(!a)return e;const l=a.getDeclarations().filter((e=>r.Node.isMethodDeclaration(e)));if(0===l.length)return e;const c=l[0];if(!(0,s.getIsUnityAPIDeclaration)(c))return e;const p=t.typeChecker,u=(0,o.selectBestOverload)(l,n,p);if(!u)return e;const g=u.getJsDocs();let d;for(const e of g){const t=e.getTags();for(const e of t)if("methodSwap"===e.getTagName()){d=e.getCommentText();break}if(d)break}if(!d)return e;if(u.getTypeParameters().length>0)return t.setSwapOverload(n,{declaration:u,methodSwapValue:d}),e;const y=n.getArguments().map((e=>(0,o.inferPossibleTypes)(e,p))),f=n.getArguments().map(((e,t)=>{const n=y[t],r=p.getTypeAtLocation(u.getParameters()[t]);return n.find((e=>(0,o.typesAreEqual)(e,r)))?e.getFullText():(n.some((e=>(0,o.isNumericCastable)(e,r))),`(${e.getFullText()}) as ${r.getText()}`)}));let m;m=r.Node.isPropertyAccessExpression(i)?`${i.getExpression().getText()}.${d}`:d;const h=`${m}(${f.join(", ")})`,T=n.replaceWithText(h),x=T.getSourceFile(),S=T.getStart();return x.insertText(S,"// @ts-ignore\n"),T}}},710:e=>{e.exports=require("ts-morph")},780:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.GenericTypeTransformer=void 0;const r=n(710),s=n(71);t.GenericTypeTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.NewExpression,r.SyntaxKind.CallExpression]}transformNode(e,t){return e.isKind(r.SyntaxKind.NewExpression)?this.transformNewExpression(e,t):this.transformGenericUsage(e,t)}transformNewExpression(e,t){const n=e.asKindOrThrow(r.SyntaxKind.NewExpression),o=n.getType(),i=n.getTypeArguments().map((e=>e.getType())),a=n.getArguments();if((0,s.getIsUnityAPIType)(o)&&i.length>0){const r=e.getSourceFile();this.ensureGenericTypeMap(r,t),(0,s.ensureTypeImported)(o,r);let l=[];const c=this.createGenericTypeVariable(o,i,r,l,t);(0,s.insertVariableStatements)(r,l,t);const p=`new ${c}(${a.map((e=>e.getFullText())).join(", ")}) as ${o.getText()}`;return n.replaceWithText(p)}return e}transformGenericUsage(e,t){let n;switch(e.getKind()){case r.SyntaxKind.CallExpression:{const s=e.asKindOrThrow(r.SyntaxKind.CallExpression);n=t.typeChecker.getTypeAtLocation(s);break}case r.SyntaxKind.PropertyAccessExpression:n=e.asKindOrThrow(r.SyntaxKind.PropertyAccessExpression).getType();break;case r.SyntaxKind.VariableDeclaration:{const t=e.asKindOrThrow(r.SyntaxKind.VariableDeclaration).getInitializer();if(!t)return e;n=t.getType();break}case r.SyntaxKind.BinaryExpression:n=e.asKindOrThrow(r.SyntaxKind.BinaryExpression).getRight().getType();break;case r.SyntaxKind.AsExpression:n=e.asKindOrThrow(r.SyntaxKind.AsExpression).getType();break;case r.SyntaxKind.TypeAssertionExpression:n=e.asKindOrThrow(r.SyntaxKind.TypeAssertionExpression).getType();break;default:return e}if(!n||!(0,s.getIsUnityAPIType)(n))return e;const o=n.getTypeArguments();if(0===o.length)return e;const i=e.getSourceFile();t.sourceFileGenericTypeMap.has(i)||t.sourceFileGenericTypeMap.set(i,new Map),(0,s.ensureTypeImported)(n,i);let a=[];return this.createGenericTypeVariable(n,o,i,a,t),(0,s.insertVariableStatements)(i,a,t),e}ensureGenericTypeMap(e,t){t.sourceFileGenericTypeMap.has(e)||t.sourceFileGenericTypeMap.set(e,new Map)}createGenericTypeVariable(e,t,n,s,o){const i=o.sourceFileGenericTypeMap.get(n),a=this.getKey(e,t);if(!i.has(a)){const l=`$generic(${this.getTypeName(e)}, ${t.map((e=>this.getTypeNameAndEnsureImported(e,n,s,o))).join(", ")})`,c=`_${a.replace(/\$/g,"_")}`;i.set(a,c),s.push({declarationKind:r.VariableDeclarationKind.Const,declarations:[{name:c,initializer:l}]})}return i.get(a)}getKey(e,t){return`${this.getTypeName(e)}$${t.map((e=>{const t=e.getTypeArguments();return t.length>0?this.getKey(e,t):this.getTypeName(e)})).join("$")}`}getTypeName(e){var t,n;return null!==(n=null===(t=e.getSymbol())||void 0===t?void 0:t.getName())&&void 0!==n?n:e.getText()}getTypeNameAndEnsureImported(e,t,n,r){return e.getTypeArguments().length>0?this.createGenericTypeVariable(e,e.getTypeArguments(),t,n,r):(0,s.getTypeNameAndEnsureImported)(e,t)}}},821:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OperatorOverloadingTransformer=void 0;const r=n(710),s=n(71),o=n(130);t.OperatorOverloadingTransformer=class{constructor(){this.nodeTypes=[r.SyntaxKind.BinaryExpression,r.SyntaxKind.PrefixUnaryExpression,r.SyntaxKind.PostfixUnaryExpression]}transformNode(e,t){return r.Node.isBinaryExpression(e)?this.transformBinaryExpression(e,t):r.Node.isPrefixUnaryExpression(e)||r.Node.isPostfixUnaryExpression(e)?this.transformUnaryExpression(e,t):e}transformBinaryExpression(e,t){var n,i;const a=e.getOperatorToken().getKind();let l=(0,o.getOperatorMethodName)(a);if((0,o.isCompoundAssignment)(a)){const e=(0,o.getEquivalentOperatorForCompound)(a);l=(0,o.getOperatorMethodName)(e)}if(l){if(a===r.SyntaxKind.EqualsEqualsEqualsToken||a===r.SyntaxKind.EqualsEqualsToken||a===r.SyntaxKind.ExclamationEqualsEqualsToken||a==r.SyntaxKind.ExclamationEqualsToken){const t=(0,o.unwrapParenthesizedExpression)(e.getRight());if(r.Node.isNullLiteral(t)||r.Node.isUndefinedKeyword(t))return e}const c=(0,o.unwrapParenthesizedExpression)(e.getLeft()),p=(0,o.unwrapParenthesizedExpression)(e.getRight()),u=this.transformNodeIfNeeded(c,t),g=this.transformNodeIfNeeded(p,t);let d=t.typeChecker.getTypeAtLocation(u),y=t.typeChecker.getTypeAtLocation(g);if(y.isLiteral()&&(y=t.typeChecker.getBaseTypeOfLiteralType(y)),d.isLiteral()&&(d=t.typeChecker.getBaseTypeOfLiteralType(d)),!(0,s.getIsUnityAPIType)(d)&&!(0,s.getIsUnityAPIType)(y))return e;const f=u.getText(),m=g.getText(),h=(0,o.getOperatorMethodReturnType)(t.typeChecker,d,l,y),T=(0,o.getOperatorMethodReturnType)(t.typeChecker,y,l,d);if(null==h&&null==T)return e;if((0,o.isCompoundAssignment)(a)){const t=c.getText(),r=(0,o.getEquivalentOperatorForCompound)(a),s=(0,o.getOperatorMethodName)(r),i=`${t} = ${null===(n=d.getSymbol())||void 0===n?void 0:n.getName()}.${s}(${t}, ${m})`;return e.replaceWithText(i)}const x=`${null===(i=(null!=h?d:y).getSymbol())||void 0===i?void 0:i.getName()}.${l}(${f}, ${m})`;if(r.Node.isBinaryExpression(u)||r.Node.isBinaryExpression(g)){const t=`(${x})`;return e.replaceWithText(t)}return e.replaceWithText(x)}return e}transformUnaryExpression(e,t){var n;const r=(0,o.unwrapParenthesizedExpression)(e.getOperand()),s=e.getOperatorToken(),i=(0,o.getOperatorMethodName)(s,!0);if(i){const s=t.typeChecker.getTypeAtLocation(r);if((0,o.getUnaryOperatorMethodReturnType)(s,i)){const t=r.getText(),o=`(${null===(n=s.getSymbol())||void 0===n?void 0:n.getName()}.${i}(${t}))`;return e.replaceWithText(o)}}return e}transformNodeIfNeeded(e,t){const n=(0,o.unwrapParenthesizedExpression)(e);return r.Node.isBinaryExpression(n)||r.Node.isPrefixUnaryExpression(n)||r.Node.isPostfixUnaryExpression(n)?this.transformNode(n,t):n}}},899:e=>{e.exports=require("typescript")},928:e=>{e.exports=require("path")},985:e=>{e.exports=require("typescript/lib/tsserverlibrary")}},t={};return function n(r){var s=t[r];if(void 0!==s)return s.exports;var o=t[r]={exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}(229)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,